#pragma version 8

// if Txn.ApplicationID == 0:
  txn ApplicationID
  pushint 0
  ==
  bz l0_end
  // then:
    // Handle Create App
    // exit(1)
    pushint 1
    return
  l0_end: // end

// switch Txn.OnCompletion:
txn OnCompletion
pushint 0 // NoOp
==
bnz main
txn OnCompletion
pushint 1 // OptIn
==
bnz opt_in
txn OnCompletion
pushint 2 // CloseOut
==
bnz close_out
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz update_app
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz delete_app
err // unexpected value

// block opt_in
opt_in:
  // Disallow Opt In
  // exit(0)
  pushint 0
  return

// block close_out
close_out:
  // Disallow Closing Out
  // exit(0)
  pushint 0
  return

// block update_app
update_app:
  // Handle Update App
  // Only allow the Creator to update the app
  // assert(Txn.Sender == Global.CreatorAddress)
  txn Sender
  global CreatorAddress
  ==
  assert
  // (for now)
  // exit(1)
  pushint 1
  return

// block delete_app
delete_app:
  // Handle Delete App
  // Only allow the Creator to delete the app
  // assert(Txn.Sender == Global.CreatorAddress)
  txn Sender
  global CreatorAddress
  ==
  assert
  // (for now)
  // exit(1)
  pushint 1
  return

// block main
main:
  // bytes fx_log = Gtxn[0].LastLog [slot 0]
  gtxn 0 LastLog
  store 0 // fx_log
  // app_global_put("fx_log", fx_log)
  pushbytes "fx_log"
  load 0 // fx_log
  app_global_put
  // int n = extract_uint64(fx_log, 0) [slot 1]
  load 0 // fx_log
  pushint 0
  extract_uint64
  store 1 // n
  // int d = extract_uint64(fx_log, 8) [slot 2]
  load 0 // fx_log
  pushint 8
  extract_uint64
  store 2 // d
  // app_global_put("n", n)
  pushbytes "n"
  load 1 // n
  app_global_put
  // app_global_put("d", d)
  pushbytes "d"
  load 2 // d
  app_global_put
  
  // exit(1)
  pushint 1
  return
