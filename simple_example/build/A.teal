#pragma version 8

// if Txn.ApplicationID == 0:
  txn ApplicationID
  pushint 0
  ==
  bz l0_end
  // then:
    // Handle Create App
    // exit(1)
    pushint 1
    return
  l0_end: // end

// switch Txn.OnCompletion:
txn OnCompletion
pushint 0 // NoOp
==
bnz main
txn OnCompletion
pushint 1 // OptIn
==
bnz opt_in
txn OnCompletion
pushint 2 // CloseOut
==
bnz close_out
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz update_app
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz delete_app
err // unexpected value

// block opt_in
opt_in:
  // Disallow Opt In
  // exit(0)
  pushint 0
  return

// block close_out
close_out:
  // Disallow Closing Out
  // exit(0)
  pushint 0
  return

// block update_app
update_app:
  // Handle Update App
  // Only allow the Creator to update the app
  // assert(Txn.Sender == Global.CreatorAddress)
  txn Sender
  global CreatorAddress
  ==
  assert
  // (for now)
  // exit(1)
  pushint 1
  return

// block delete_app
delete_app:
  // Handle Delete App
  // Only allow the Creator to delete the app
  // assert(Txn.Sender == Global.CreatorAddress)
  txn Sender
  global CreatorAddress
  ==
  assert
  // (for now)
  // exit(1)
  pushint 1
  return

// block main
main:
  // bytes lp_address = Txn.Accounts[1] [slot 0]
  txna Accounts 1
  store 0 // lp_address
  // int exists [slot 1]
  // bytes asset_1_reserves_bytes
  // int asset_1_reserves [slot 2]
  // exists, asset_1_reserves = app_local_get_ex(lp_address, LP_APP, ASSET_1_KEY)
  load 0 // lp_address
  pushint 148607000 // LP_APP
  pushbytes "asset_1_reserves" // ASSET_1_KEY
  app_local_get_ex
  store 1 // exists
  store 2 // asset_1_reserves
  
  // exit(1)
  pushint 1
  return
